{"version":3,"sources":["webpack:///./src/pages/tags.js","webpack:///./src/components/HeaderGeneric.js","webpack:///./node_modules/lodash/kebabCase.js","webpack:///./node_modules/lodash/_createCompounder.js","webpack:///./node_modules/lodash/_arrayReduce.js","webpack:///./node_modules/lodash/deburr.js","webpack:///./node_modules/lodash/words.js","webpack:///./node_modules/lodash/_asciiWords.js","webpack:///./node_modules/lodash/_hasUnicodeWord.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/_unicodeWords.js"],"names":["TagsPageRoute","render","allTags","this","props","data","allMarkdownRemark","group","Glamor","createElement","_layouts__WEBPACK_IMPORTED_MODULE_5__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","a","title","_components_HeaderGeneric__WEBPACK_IMPORTED_MODULE_6__","id","className","map","tag","key","fieldValue","gatsby__WEBPACK_IMPORTED_MODULE_4__","style","textDecoration","to","kebabCase","totalCount","React","Component","pageQuery","__webpack_require__","HeaderGeneric","_ref","children","createCompounder","result","word","index","toLowerCase","module","exports","arrayReduce","deburr","words","reApos","RegExp","callback","string","replace","array","iteratee","accumulator","initAccum","length","value","asciiWords","hasUnicodeWord","toString","unicodeWords","pattern","guard","undefined","match","reAsciiWord","reHasUnicodeWord","test","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsRegional","rsSurrPair","rsUpper","rsMiscLower","rsMiscUpper","reOptMod","rsModifier","rsSeq","join","rsEmoji","reUnicodeWord"],"mappings":"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","file":"component---src-pages-tags-js-bec5c121a2c6348ec269.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../layouts';\nimport HeaderGeneric from '../components/HeaderGeneric'\nimport kebabCase from 'lodash/kebabCase';\n\nclass TagsPageRoute extends React.Component {\n  render() {\n    const allTags = this.props.data.allMarkdownRemark.group;\n\n    return (\n      <Layout>\n        <Helmet title=\"Tags\" />\n        <HeaderGeneric title=\"Tags\" />\n        <div id=\"main\">\n          <section id=\"content\" className=\"main\">\n            <ul>\n              {allTags.map(tag => (\n                <li key={tag.fieldValue}>\n                  <Link\n                    style={{\n                      textDecoration: `none`,\n                    }}\n                    to={`/tags/${kebabCase(tag.fieldValue)}/`}\n                  >\n                    {tag.fieldValue} ({tag.totalCount})\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </section>\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default TagsPageRoute;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      filter: { frontmatter: { draft: { ne: true }, example: { ne: true } } }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nconst HeaderGeneric = ({ title, children }) => (\n  <header id=\"header\">\n    {title && (\n        <h1>{title}</h1>\n    )}\n    {children && <p>{children}</p>}\n  </header>\n);\n\nexport default HeaderGeneric;\n","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n","var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n"],"sourceRoot":""}